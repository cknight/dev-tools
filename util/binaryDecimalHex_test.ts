import { assert, assertEquals, test } from "../test_deps.ts";
import { EncodeDecodeError } from "../types.ts";
import { binaryToDecimal, binaryToHex, decimalToBinary, decimalToHex, hexToBinary, hexToDecimal, isBinary, isDecimal, isHex } from "./binaryDecimalHex.ts";

test({
  name: "binary numbers correctly identified",
  fn() {
    assert(isBinary("0"));
    assert(isBinary("1"));
    assert(isBinary("10110001001010"));
    assert(isBinary("10110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010101100010010101011000100101010110001001010"));
    assert(!isBinary(""));
    assert(!isBinary("-"));
    assert(!isBinary("-0"));
    assert(!isBinary("-1"));
    assert(!isBinary("2"));
    assert(isBinary("001"));
    assert(!isBinary("1001000070000"));
  }
});

test({
  name: "hex numbers correctly identified",
  fn() {
    assert(isHex("0"));
    assert(isHex("1"));
    assert(isHex("ffffff"));
    assert(isHex("123456789abcdef123456789abcdef123456789abcdef123456789abcdef123456789abcdef123456789abcdef123456789abcdef123456789abcdef123456789abcdef"));
    assert(!isHex(""));
    assert(!isHex("-"));
    assert(!isHex("-0"));
    assert(!isHex("-1"));
    assert(!isHex("g"));
    assert(isHex("001"));
    assert(!isHex("10010000g0000"));
  }
});

test({
  name: "decimal numbers correctly identified",
  fn() {
    assert(isDecimal("0"));
    assert(isDecimal("1"));
    assert(isDecimal("999999999"));
    assert(isDecimal("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"));
    assert(!isDecimal(""));
    assert(!isDecimal("-"));
    assert(!isDecimal("-0"));
    assert(!isDecimal("-1"));
    assert(!isDecimal("g"));
    assert(isDecimal("001"));
    assert(!isDecimal("10010000g0000"));
  }
});

test({
  name: "binary to decimal conversion",
  fn() {
    assertEquals("0", binaryToDecimal("0"));
    assertEquals("1", binaryToDecimal("1"));
    assertEquals("1024", binaryToDecimal("10000000000"));
    assertEquals("203947520934752903687471932782374986532904785209347758", binaryToDecimal("1000100001000110101000111001111100011100000110101010100011101000100000110000001111111000100010101101110000110110011111010101111000101101111111101001001000011010100100111010101110"));
    assertEquals("Failed to convert binary to decimal", (binaryToDecimal("invalid") as EncodeDecodeError).msg);
  }
});

test({
  name: "decimal to binary converison",
  fn() {
    assertEquals("0", decimalToBinary("0"));
    assertEquals("1", decimalToBinary("1"));
    assertEquals("10000000000", decimalToBinary("1024"));
    assertEquals("1000100001000110101000111001111100011100000110101010100011101000100000110000001111111000100010101101110000110110011111010101111000101101111111101001001000011010100100111010101110", decimalToBinary("203947520934752903687471932782374986532904785209347758"));
    assertEquals("Failed to convert decimal to binary", (decimalToBinary("invalid") as EncodeDecodeError).msg);
  }
});

test({
  name: "binary to hex converison",
  fn() {
    assertEquals("0", binaryToHex("0"));
    assertEquals("1", binaryToHex("1"));
    assertEquals("123456789abcdef", binaryToHex("100100011010001010110011110001001101010111100110111101111"));
    assertEquals("2211a8e7c706aa3a20c0fe22b70d9f578b7fa486a4eae", binaryToHex("1000100001000110101000111001111100011100000110101010100011101000100000110000001111111000100010101101110000110110011111010101111000101101111111101001001000011010100100111010101110"));
    assertEquals("Failed to convert binary to hex", (binaryToHex("invalid") as EncodeDecodeError).msg);
  }
});

test({
  name: "hex to binary converison",
  fn() {
    assertEquals("0", hexToBinary("0"));
    assertEquals("1", hexToBinary("1"));
    assertEquals("100100011010001010110011110001001101010111100110111101111", hexToBinary("123456789abcdef"));
    assertEquals("1000100001000110101000111001111100011100000110101010100011101000100000110000001111111000100010101101110000110110011111010101111000101101111111101001001000011010100100111010101110", hexToBinary("2211a8e7c706aa3a20c0fe22b70d9f578b7fa486a4eae"));
    assertEquals("Failed to convert hex to binary", (hexToBinary("invalid") as EncodeDecodeError).msg);
  }
});

test({
  name: "hex to decimal converison",
  fn() {
    assertEquals("0", hexToDecimal("0"));
    assertEquals("1", hexToDecimal("1"));
    assertEquals("81985529216486895", hexToDecimal("123456789abcdef"));
    assertEquals("203947520934752903687471932782374986532904785209347758", hexToDecimal("2211a8e7c706aa3a20c0fe22b70d9f578b7fa486a4eae"));
    assertEquals("Failed to convert hex to decimal", (hexToDecimal("invalid") as EncodeDecodeError).msg);
  }
});

test({
  name: "decimal to hex converison",
  fn() {
    assertEquals("0", decimalToHex("0"));
    assertEquals("1", decimalToHex("1"));
    assertEquals("123456789abcdef", decimalToHex("81985529216486895"));
    assertEquals("2211a8e7c706aa3a20c0fe22b70d9f578b7fa486a4eae", decimalToHex("203947520934752903687471932782374986532904785209347758"));
    assertEquals("Failed to convert decimal to hex", (decimalToHex("invalid") as EncodeDecodeError).msg);
  }
});